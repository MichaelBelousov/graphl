{"componentChunkName":"component---src-pages-blog-tsx","path":"/blog/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2>Intro</h2>\n<p>Why are there no visual scripting languages? You may know the answer here already. There are tons!</p>\n<p>Here is a sample of some different visual scripting systems, some you may have heard of:</p>\n<ul>\n<li><a href=\"https://docs.blender.org/manual/en/latest/modeling/geometry_nodes/index.html\">Blender nodes</a></li>\n<li><a href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/introduction-to-blueprints-visual-scripting-in-unreal-engine\">Unreal Engine Blueprints</a></li>\n<li><a href=\"https://developers.google.com/blockly/\">Scratch/Google Blockly</a></li>\n<li><a href=\"https://www.grasshopper3d.com/page/tutorials-1\">Grasshopper</a></li>\n<li><a href=\"https://retejs.org\">retejs.org</a></li>\n<li><a href=\"https://unit.software\">unit</a></li>\n<li>every no-code workflow engine ever</li>\n</ul>\n<!-- TODO: different font -->\n<p>So a better question then is, <strong>why can you use languages like JavaScript or Python in websites, browser extensions, servers,\nmicrocontrollers, minecraft, Figma, etc...</strong></p>\n<p><strong>And yet you can only run Unreal Engine's Blueprint visual scripting language inside the Unreal Engine editor?</strong>\nYou can't even write your own blueprints and run them in an Unreal Engine-based game!</p>\n<p>The answer as far as I can tell is is three fold:</p>\n<ul>\n<li>people don't design visual languages to scale, they create them as a <a href=\"https://en.wikipedia.org/wiki/Domain-specific_language\">Domain-Specific Language (DSL)</a>\nfor users that are less familiar with code</li>\n<li>scripting language are usually implemented using a naive interpreter, assuming they don't need to scale</li>\n<li>Some languages, translate the visual language to a portable language.\n<a href=\"https://studio.retejs.org/\">Rete Studio</a>) does this, and today they explicitly say it is in beta and recommend you\n<em>verify that the obtained graph is correctly converted into code that reflects the original code!</em><a href=\"#footnote1\"><super>1</super></a>.</li>\n</ul>\n<p>I've seen few attempts and little success with the last approach. And on top of that, they're now converting to a language\nlike JavaScript with its own complex semantics. The simple interpreter approach is easy but slow, so let's ignore it for now.</p>\n<p>Why is it hard to convert graphs into languages like JavaScript and Python?\nI'll answer that, but first, why shouldn't graph languages suck?</p>\n<h2>Can they not suck?</h2>\n<p>I think so!</p>\n<p>The graph is in many ways just a <a href=\"https://en.wikipedia.org/wiki/Control-flow_graph\">Control Flow Graph</a> inside a compiler.\nYou could easily make it performant, even compile it to native code such that it's lightning fast. You don't even have to\nwrite a parser!</p>\n<p>The hard part is that some people want to be able to convert to a real programming language and back.\nWhy do people want that? I think it's a social problem. We have a large group of text-editor trained\npeople (programmers) who want to write their code in text (I am one of them), and we have a large(r) group of\npeople who don't want the overhead of learning 60 years baggage worth of text input techniques (<em>cough</em> vim/emacs),\nthey just want to click on a socket and be told which functions can be applied to this integer.</p>\n<p>I am getting ahead of myself, but I think we can introduce a <em>new</em> textual programming language which\nlets us <em>serialize</em> (save) our programs textually, edit them in that format, and then load them back in a graph!\nWe just need to extend existing languages with some new pieces to make it possible to represent graphs intuitively.</p>\n<p>This will allow both traditional text-editor-using programmers and non-programmer low-code users to work together\nand customize or integrate their applications in ways that today is inhibited by that (mostly social) divide.</p>\n<p>I even optimistically believe this can bring us closer to the dream of truly extensible applications!\nToday, 99% of browser users will never make a browser extension even if they have to work with a website daily where they need\nto click something 100 times to get their work done.\nThere's just too much to learn to create an \"open selected image in photoshop\" button.</p>\n<p>But I think the gap will be narrowed significantly if a new visual-first programming language can co-exist with the likes\nof Python and JavaScript. And yes, I know about AI<super><a href=\"#footnote2\">2</a></super>.</p>\n<h2>Why are graph-to-language compilers hard?</h2>\n<p>Ok, so I mentioned briefly we need a new language. Why can't we use current languages?</p>\n<p>There are several reasons:</p>\n<ul>\n<li>it's tempting to use the language's AST as the visual graph, but ASTs are <em>Abstract Syntax TREES</em>, they aren't graphs,\nand they were not designed for intuitive visual use. Even generalizations of the AST are not intuitive, you basically\nhave to know how the underlying language works</li>\n<li>In a truly graph-like visual scripting language you can intuitively jump back to previous code sections,\nbut the equivalent in programming languages <em>goto</em> is <a href=\"https://en.wikipedia.org/wiki/Considered_harmful\">considered harmful</a>\nand doesn't truly exist in many languages, including Python/JavaScript.</li>\n</ul>\n<h2>using data twice</h2>\n<p>As an example, consider how someone might convert the following graph to JavaScript.</p>\n<p>Ok, so maybe data isn't the problem.</p>\n<h2>using code twice</h2>\n<p>As an example, consider how someone might convert the following graph to JavaScript.</p>\n<!-- -->\n<p>How do you go back to the other code after?\nWithout goto, in JavaScript you have to implement your own state machine, which is...\nnot really how a JavaScript programmer would ever do it.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">graph</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">:</span> integer<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> integer <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> state<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token operator\">|</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"done\"</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">!==</span> <span class=\"token string\">\"done\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>counter <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    counter <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    state <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                state <span class=\"token operator\">=</span> <span class=\"token string\">\"done\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now if you're a programmer, you might be thinking, \"Hey, that's just a while loop!\".\nBut someone just writing an algorithm intuitively without knowing structured programming,\nmight hear about a while loop and say, \"Hey! That's just a jump back to the condition!\".</p>\n<p>So-called \"structured programming\" is less important when you can literally see the control\nflow graph in front of you...</p>\n<h3>Isomorphism</h3>\n<p>And after all that difficulty turning graphs into high-level code, some people really want to be able to convert\nthat javascript <em>back</em> into the original graph! How preposterous...</p>\n<p>That's what an isomorphism is, a conversion of something from one form into another, that is perfectly reversible\nwithout losing any detail.</p>\n<p>Imagine taking the above state machine JavaScript code and converting it back into a graph. Doable? Perhaps...\nWill your compiler convert all while+switch state machines into graph code?\nWhat if someone added a new state?\nWhat if they refactored it to not use a state machine?</p>\n<h2>What about a new language?</h2>\n<h2>Control flow</h2>\n<h2>Why Lisp</h2>\n<h2>Lisp macros</h2>\n<hr />\n<ol>\n<li>\n<p><span id=\"footnote1\"></span> Open the \"beta\" warning block to read it <a href=\"https://studio.retejs.org/\">https://studio.retejs.org/</a>.\nIt truly is a challenging thing, especially converting to a dynamic language.</p>\n</li>\n<li>\n<p><span id=\"footnote2\"></span> I will not go into detail right now about AI and coding, many seem to believe that the dawn of\nenglish-only coding is near, but here is my overall thinking:</p>\n<p>I would suggest the evidence is pointing to us still needing well trained humans deeply involved in the process until\ntoday's AI compute load becomes significantly cheaper (and uses clean energy).\nThe current trajectory of \"better\" AI seems to include \"spend catastrophic amounts of compute to invoke the LLM more times\nfor 50% more (decaying) accuracy in each iteration\".</p>\n<p>Yes, a small browser extension might be doable, but I think most built-only-by-AI projects will rot.</p>\n</li>\n</ol>","frontmatter":{"date":"January 01, 2025","path":"/blog/why-are-there-no-visual-scripting-languages","title":"Why are there no visual scripting languages?"},"fields":{"slug":"/blog/why-are-there-no-visual-scripting-languages/"}}},{"node":{"html":"<h2>Installation</h2>\n<p>Be sure to read the <a href=\"/commercial\">license</a> which has\nimplications for commercial usage.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @graphl/ide</code></pre></div>\n<h2>Usage</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> graphl <span class=\"token keyword\">from</span> <span class=\"token string\">\"./WebBackend.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> confetti <span class=\"token keyword\">from</span> <span class=\"token string\">\"@tsparticles/confetti\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// grab the canvas you prepared</span>\n<span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-canvas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// we define custom nodes separately here</span>\n<span class=\"token keyword\">const</span> customFuncs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"Confetti\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">parameters</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"particle count\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> graphl<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>i32<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">results</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">impl</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">particleCount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">confetti</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        particleCount<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">spread</span><span class=\"token operator\">:</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">origin</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">0.6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// give graphl control over that canvas with options</span>\n<span class=\"token comment\">// see the typescript types for all options</span>\n<span class=\"token keyword\">const</span> ide <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">graphl<span class=\"token punctuation\">.</span>Ide</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">bindings</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">jsHost</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">functions</span><span class=\"token operator\">:</span> customFuncs<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">preferences</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">topbar</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">visible</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// execute a function that the user created in the IDE</span>\nide<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">.</span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"date":"November 22, 2024","path":"/blog/docs","title":"Graphl Docs"},"fields":{"slug":"/blog/docs/"}}},{"node":{"html":"<p>TODO: finish this blog</p>\n<p>A long time ago, I didn't program.</p>\n<p>In fact, I only scraped some Python for loops together to automate some stuff in Blender,\nwith much help from my dad, and it was beyond me.</p>\n<img src=\"https://mikemikeb.com/images/the-eye.png\" alt=\"mike's procedural eye\"/>\n<p>Then, while still quite young, I learned about Unreal Engine blueprints.\nI was already programming by then so I didn't like them much, but I met several animators,\ngame developers, and later in the Architecture-Engineering-Construction industry several\narchitects who swore by this thing. I met (and led a team of) people making entire projects\nthat pretty much only used visual script. And they vastly preferred it.</p>\n<p>And I dreamed that I would never have to edit these things myself.</p>\n<p>I realized eventually that text editing is the barrier. Text editing is an old vestige\nof the technological transitions that brought us todays intuitive computers. And I even\nthink it's very efficient once learnt and combined with good tooling.</p>\n<p>Now I believe that the gap between visual languages and textual languages is an\nimagined one. And I intend to lead the design of this language to prove it.</p>\n<p>This language will be <em>isomorphic</em> to a visual representation. Meaning you can edit\none format and it will cleanly change the other, automatically. So people can choose\nwhichever format they prefer and still work together!</p>","frontmatter":{"date":"November 21, 2024","path":"/blog/how-I-came-up-with-graphl","title":"How I came up with Graphl"},"fields":{"slug":"/blog/HowICameUpWithGraphl/"}}}]}},"pageContext":{}},"staticQueryHashes":["63159454"],"slicesMap":{}}