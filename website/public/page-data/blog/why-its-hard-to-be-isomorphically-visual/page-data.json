{"componentChunkName":"component---src-components-blog-page-tsx","path":"/blog/why-its-hard-to-be-isomorphically-visual/","result":{"data":{"markdownRemark":{"html":"<h2>Why do visual scripting languages suck?</h2>\n<p>Why are there no very popular visual scripting languages?\nYou may know the answer here already. There are tons!</p>\n<p>Here is a sample of some different visual scripting systems, some you may have heard of:</p>\n<ul>\n<li><a href=\"https://docs.blender.org/manual/en/latest/modeling/geometry_nodes/index.html\">Blender nodes</a></li>\n<li><a href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/introduction-to-blueprints-visual-scripting-in-unreal-engine\">Unreal Engine Blueprints</a></li>\n<li><a href=\"https://developers.google.com/blockly/\">Scratch/Google Blockly</a></li>\n<li><a href=\"https://www.grasshopper3d.com/page/tutorials-1\">Grasshopper</a></li>\n<li><a href=\"https://unit.software\">unit</a></li>\n<li><a href=\"https://github.com/IndiePython/nodezator\">nodezator</a></li>\n<li>every no-code workflow engine ever</li>\n</ul>\n<p>And they don't suck, although maybe some parts of some of them do. So a better question then is:</p>\n<!-- TODO: different font -->\n<p><em><strong>Why can you use languages like JavaScript or Python in websites, browser extensions, servers,\nmicrocontrollers, minecraft, Figma, etc... And yet you can only run Unreal Engine's Blueprint visual\nscripting language inside the Unreal Engine editor?</strong></em></p>\n<p>You can't even write your own blueprints and run them in an Unreal Engine-based game!\n(although a few mod systems with Epic's blessing seem to have a form of this).</p>\n<p>The answer as far as I can tell is is three fold:</p>\n<ul>\n<li>People don't design visual languages to be used at scale.\nThey create them as a <a href=\"https://en.wikipedia.org/wiki/Domain-specific_language\">Domain-Specific Language (DSL)</a>\nfor users that are less familiar with big code-based projects.</li>\n<li>Visual scripting is usually implemented in a limited scope, with less resources,\noften with a simplistic interpreter since performance isn't a concern</li>\n<li>Some visual scripts translate to a more common textual language (like JavaScript).\n<a href=\"https://studio.retejs.org/\">Rete Studio</a>) does this, and today they explicitly say it is in beta, recommending you\n\"<em>verify that the obtained graph is correctly converted into code that reflects the original code\"!</em><a href=\"#footnote1\"><super>1</super></a>.</li>\n</ul>\n<p>I've seen few attempts and little success with the last approach. And on top of that, they're now converting to a\nnon-visual language like JavaScript with its own complex semantics. The simple interpreter approach is easy but slow,\nand I think just a consequence of the project goals, so I think we can ignore it for now.</p>\n<p>But why is it hard to convert graphs into languages like JavaScript and Python?\nI plan to answer that in more detail in a future post.\nFor now, I'll answer the question of can they not suck?</p>\n<h2>Can they not suck?</h2>\n<p>I think so!</p>\n<p>The visual graph is in many ways just a <a href=\"https://en.wikipedia.org/wiki/Control-flow_graph\">Control Flow Graph</a> inside a compiler.\nYou could easily make it performant, even compile it to native code such that it's lightning fast. You don't even have to\nwrite a parser (the easy part tbh).</p>\n<p>The hard part is that some people want to be able to convert to a real programming language and back.\nWhy do people want that? I think it's a social problem. We have a large group of text-editor trained\npeople (programmers) who want to write their code in text (I am one of them now), and we have a large(r) group of\npeople who don't want the overhead of learning a 60 year-old paradigm of text input invented under the baggage of\npunch cards, teletype machines, and terminals.</p>\n<p><em>They just want to click on an integer output and be able to search through the list of functions that apply to integers.</em></p>\n<h2>The dream of the isomorphic visual <em>and</em> textual language</h2>\n<p>I believe we can introduce a <em>new</em> textual programming language which\nlets us <em>serialize</em> (save) our programs textually to a sane, language-like format for text editing,\nand then load them back in a graph! We just need to extend existing languages with some new pieces to\nmake it possible to represent graphs intuitively.</p>\n<p>This will allow both traditional text-editor-using programmers and non-programmer low-code users to work together\nand customize or integrate their applications in ways that today is inhibited by that sociotechnical divide.</p>\n<p>I even optimistically believe this can bring us closer to the dream of truly extensible applications!\nToday, 99% of browser users will never script a browser extension even if they have to work with a website daily where they need\nto click something 100 times to get their work done.\nThere's just too much to learn to create something as simple as an \"open selected image in photoshop\" button.</p>\n<p>But I think the gap will be narrowed significantly if a new visual-first programming language can co-exist with the likes\nof Python and JavaScript. And if you're thinking about AI, I don't think it\nprecludes the need for this kind of language. In fact, I think AI makes it even more necessary<super><a href=\"#footnote2\">2</a></super>.</p>\n<h2>Problems to solve</h2>\n<h2>Why are graph-to-language compilers hard?</h2>\n<p>Ok, so I mentioned briefly we need a new language. Why can't we use current languages?</p>\n<p>There are several reasons:</p>\n<ul>\n<li>it's tempting to use the language's AST as the visual graph, but ASTs are <em>Abstract Syntax TREES</em>, they aren't graphs,\nand they were not designed for intuitive visual use. Even generalizations of the AST are not intuitive, you basically\nhave to know how the underlying language works</li>\n<li>In a truly graph-like visual scripting language you can intuitively jump back to previous code sections,\nbut the equivalent in programming languages <em>goto</em> is <a href=\"https://en.wikipedia.org/wiki/Considered_harmful\">considered harmful</a>\nand doesn't truly exist in many languages, including Python/JavaScript.</li>\n</ul>\n<h2>using data twice</h2>\n<p>As an example, consider how someone might convert the following graph to JavaScript.</p>\n<p>Ok, so maybe data isn't the problem.</p>\n<h2>using code twice</h2>\n<p>As an example, consider how someone might convert the following graph to JavaScript.</p>\n<!-- -->\n<p>How do you go back to the other code after?\nWithout goto, in JavaScript you have to implement your own state machine, which is...\nnot really how a JavaScript programmer would ever do it.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">graph</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">:</span> integer<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> integer <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> state<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token operator\">|</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"done\"</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">!==</span> <span class=\"token string\">\"done\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>counter <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    counter <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    state <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                state <span class=\"token operator\">=</span> <span class=\"token string\">\"done\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now if you're a programmer, you might be thinking, \"Hey, that's just a while loop!\".\nBut someone just writing an algorithm intuitively without knowing structured programming,\nmight hear about a while loop and say, \"Hey! That's just a jump back to the condition!\".</p>\n<p>So-called \"structured programming\" is less important when you can literally see the control\nflow graph in front of you...</p>\n<h3>Isomorphism</h3>\n<p>And after all that difficulty turning graphs into high-level code, some people really want to be able to convert\nthat javascript <em>back</em> into the original graph! How preposterous...</p>\n<p>That's what an isomorphism is, a conversion of something from one form into another, that is perfectly reversible\nwithout losing any detail.</p>\n<p>Imagine taking the above state machine JavaScript code and converting it back into a graph. Doable? Perhaps...\nWill your compiler convert all while+switch state machines into graph code?\nWhat if someone added a new state?\nWhat if they refactored it to not use a state machine?</p>\n<h2>What about a new language?</h2>\n<h2>Control flow</h2>\n<h2>Why Lisp</h2>\n<h2>Lisp macros</h2>\n<hr />\n<p>There is a <em>lot</em> out there, so maybe I got something wrong, please feel free to\n<a href=\"me@mikemikeb.com\">email</a> me to help me make corrections.</p>\n<p>Footnotes:</p>\n<ol>\n<li>\n<p><span id=\"footnote1\"></span> Open the \"beta\" warning block to read it <a href=\"https://studio.retejs.org/\">https://studio.retejs.org/</a>.\nIt truly is a challenging thing so I don't blame them, you're converting to a language with separate semantics and potentially\nbackwards, while trying to be readable on both ends...</p>\n</li>\n<li>\n<p><span id=\"footnote2\"></span> I will not go into detail right now about AI and coding, many seem to believe that the dawn of\nenglish-only coding is near, but here is my overall thinking:</p>\n<p>I would suggest the evidence is pointing to us still needing well trained humans deeply involved in the process until\ntoday's AI compute load becomes significantly cheaper (and uses clean energy).\nThe current trajectory of \"better\" AI seems to include \"spend catastrophic amounts of compute to invoke the LLM hundreds of times\nfor 50% more (decaying) accuracy in each iteration\".</p>\n<p>Yes, a small browser extension might be doable, but I think most built-only-by-AI projects will rot, and still need debugging by\nhumans. And a visual language's debugger will be <em>much</em> easier for the less technically endowed.</p>\n</li>\n</ol>","frontmatter":{"title":"Why are there no visual scripting languages?","path":"/blog/why-are-there-no-visual-scripting-languages","date":"January 1, 2025"}}},"pageContext":{"slug":"/blog/why-its-hard-to-be-isomorphically-visual/"}},"staticQueryHashes":["63159454"],"slicesMap":{}}